syntax = "proto3";

package plagiarism_detection;

service PingService {
    rpc Ping(PingRequest) returns (PingResponse) {}
}

service AuthService {
    rpc Login(LoginRequest) returns (LoginResponse) {}
    rpc Register(RegisterRequest) returns (RegisterResponse) {}
    rpc GetLoginHistory(GetLoginHistoryRequest) returns (GetLoginHistoryResponse) {}
}

service FileService {
    rpc UploadFile(stream UploadFileRequest) returns (UploadFileResponse) {}
    rpc GetUploadedFileList(GetUploadedFileListRequest) returns (GetUploadedFileListResponse) {}
    rpc DownloadFile(DownloadFileRequest) returns (stream DownloadFileResponse) {}
    rpc DownloadMultipleFiles(DownloadMultipleFilesRequest) returns (stream DownloadMultipleFilesResponse) {}
    rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse) {}
}

service CheckService {
    rpc OneToManyCheck(OneToManyCheckRequest) returns (stream OneToManyCheckResponse) {}
    rpc ManyToManyCheck(ManyToManyCheckRequest) returns (stream ManyToManyCheckResponse) {}
}

service ReportService {
    rpc GetTaskList(GetTaskListRequest) returns (GetTaskListResponse) {}
    rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {}
    // rpc GetAllReportList(GetAllReportListRequest) returns (GetAllReportListResponse) {}
    rpc GetReport(GetReportRequest) returns (GetReportResponse) {}
    rpc UpdateReport(UpdateReportRequest) returns (UpdateReportResponse) {}
}

message PingRequest {
}

message PingResponse {
    int32 status = 1;
}

message LoginRequest {
    string username = 1;
    string password = 2;
}

message LoginResponse {
    int32 status = 1;
    string token = 2;
}

message RegisterRequest {
    string username = 1;
    string password = 2;
}

message RegisterResponse {
    int32 status = 1;
}

message GetLoginHistoryRequest {
    string token = 1;
    // neg value means no limit
    int32 limit = 2;
}

message GetLoginHistoryResponse {
    int32 status = 1;
    repeated LoginRecord record = 2;
}

message LoginRecord {
    string login_time = 1;
    bool success = 2;
}

message UploadFileRequest {
    oneof data {
        FileMetadata metadata = 1;
        FileChunk chunk = 2;
    }
}

message FileMetadata {
    string token = 1;
    string file_path = 2;
    int32 size = 3;
}

message FileChunk {
    bytes data = 1;
}

message UploadFileResponse {
    int32 status = 1;
    optional int32 file_id = 2;
}

message GetUploadedFileListRequest {
    string token = 1;
}

message GetUploadedFileListResponse {
    int32 status = 1;
    repeated FileInfo files = 3;
}

message FileInfo {
    int32 id = 1;
    string file_path = 2;
    int32 size = 3;
    string uploaded_at = 4;
}

message DownloadFileRequest {
    string token = 1;
    int32 file_id = 2;
}

message DownloadFileResponse {
    oneof data {
        int32 status = 1;
        FileChunk chunk = 2;
    }
}

message DownloadMultipleFilesRequest {
    string token = 1;
    repeated int32 file_ids = 2;
}

message DownloadMultipleFilesResponse {
    oneof data {
        int32 status = 1;
        FileChunk chunk = 2;
    }
}

message DeleteFileRequest {
    string token = 1;
    int32 file_id = 2;
}

message DeleteFileResponse {
    int32 status = 1;
}


message OneToManyCheckRequest {
    string token = 1;
    string task_name = 2;
    int32 main_file_id = 3;
    repeated int32 file_ids = 4;
}

message OneToManyCheckResponse {
    oneof data {
        int32 status = 1;
        Empty empty = 2;
        string task = 3;
    }
}

message ManyToManyCheckRequest {
    string token = 1;
    string task_name = 2;
    repeated int32 file_ids = 3;
}

message ManyToManyCheckResponse {
    oneof data {
        int32 status = 1;
        Empty empty = 2;
        string task = 3;
    }
}

message GetTaskListRequest {
    string token = 1;
}

message GetTaskListResponse {
    int32 status = 1;
    repeated TaskPreview task_previews = 2;
}

message GetTaskRequest {
    string token = 1;
    int32 task_id = 2;
}

message GetTaskResponse {
    int32 status = 1;
    string task = 2;
}

message GetReportRequest {
    string token = 1;
    int32 report_id = 2;
}

message GetReportResponse {
    int32 status = 1;
    string report = 2;
}

message UpdateReportRequest {
    string token = 1;
    int32 report_id = 2;
    string report = 3;
}

message UpdateReportResponse {
    int32 status = 1;
}

message TaskPreview {
    int32 id = 1;
    int32 type = 2;
    string task_name = 3;
    optional int32 main_file_id = 4;
    int32 file_count = 5;
    string created_at = 6;
}

message Empty {
}